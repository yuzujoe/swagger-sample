openapi: 3.0.0
info:
  title: inazma-sample
  description: this api practice inazma
  termsOfService: http://example.com/terms/
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  version: 1.0.0
servers:
- url: http://localhost:8080
  description: Development server
paths:
  /users/siginup:
    post:
      tags:
      - users
      summary: Create a new User
      description: Create a new User
      requestBody:
        description: user to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              phone: 090-6940-4384
              password: yuzu0708
      responses:
        200:
          description: CREATED_USER
        400:
          description: Bad request.
        500:
          description: INTERNAL_SERVER_ERROR.
  /users/siginin:
    post:
      tags:
      - users
      summary: Login user
      description: Login user
      requestBody:
        description: user to login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              phone: 090-6940-4384
              password: yuzu0708
      responses:
        200:
          description: LOGIN
          content:
            application/json:
              example:
                token: token
  /users/logout:
    post:
      tags:
      - users
      summary: logout user
      description: logout
      responses:
        default:
          description: logged out
          content: {}
      security:
      - bearerAuth: []
  /users/update:
    put:
      tags:
      - users
      summary: update user
      description: update user infomation
      responses:
        200:
          description: UPDATED_USER
          content: {}
        400:
          description: Bad request.
          content: {}
        401:
          description: Unauthorized
          content: {}
        500:
          description: INTERNAL_SERVER_ERROR.
          content: {}
      security:
      - bearerAuth: []
  /reservations/:id:
    get:
      tags:
      - reservations
      summary: get reservation list
      description: get reservation list
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
      security:
      - bearerAuth: []
    put:
      tags:
      - reservations
      summary: update reservation
      description: update reservation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        200:
          description: success updated
          content: {}
        400:
          description: bad request
          content: {}
        401:
          description: Unauthorized
          content: {}
        500:
          description: internal server error
          content: {}
      security:
      - bearerAuth: []
    delete:
      tags:
      - reservations
      summary: delete reservation
      description: delete reservation
      parameters:
      - name: reservation_id
        in: path
        description: reservation_id on delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        401:
          description: Unauthorized
          content: {}
        404:
          description: Reservation not found
          content: {}
        500:
          description: internal server error
          content: {}
      security:
      - bearerAuth: []
  /reservations:
    post:
      tags:
      - reservations
      summary: create reservation
      description: create reservation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
        required: true
      responses:
        200:
          description: created
          content: {}
        400:
          description: bad request
          content: {}
        401:
          description: Unauthorized
          content: {}
        500:
          description: internal server error
          content: {}
      security:
      - bearerAuth: []
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
          format: password
        phone:
          type: string
        prefecture:
          type: string
          description: 都道府県
        city:
          type: string
          description: 市区町村
        address1:
          type: string
          description: 町名
        address2:
          type: string
          description: 番地
        address3:
          type: string
          description: 建物名
        zipcode:
          type: string
          description: 郵便番号
    Reservation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        reservationDate:
          type: string
          format: date-time
        reservationTime:
          type: string
          format: date-time
        reservationType:
          type: integer
          format: int4
        purpose:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
